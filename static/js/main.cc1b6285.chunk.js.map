{"version":3,"sources":["logo.svg","components/Addform.js","components/Task.js","components/Tasks.js","components/Pages/Home.js","components/Pages/About.js","components/Pages/Contact.js","components/Navbar.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Addform","addRecord","bind","e","preventDefault","fetch","method","headers","body","JSON","stringify","Math","floor","random","target","task","value","then","res","json","result","props","addRec","catch","err","console","log","onSubmit","this","className","type","name","id","placeholder","Component","Task","delRecord","editRecord","updateRecord","state","isEdit","getAttribute","tasks","onDel","setState","title","isCompleted","onUpdate","defaultValue","key","onClick","datakey","Tasks","getRecord","map","src","logo","alt","Home","About","Contact","Navbar","to","data-toggle","data-target","aria-controls","aria-expanded","aria-label","exact","path","component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.cc1b6285.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, {Component} from 'react';\r\n\r\nclass Addform extends Component{\r\n    constructor(){\r\n        super();\r\n        this.addRecord = this.addRecord.bind(this);\r\n    }\r\n\r\n    addRecord(e){\r\n        e.preventDefault();\r\n        fetch('http://localhost:4000/tasks',{\r\n            method: \"POST\",\r\n            headers: {\r\n                'Content-Type' : 'Application/json'\r\n            },\r\n            body: JSON.stringify({\r\n                \"id\": Math.floor((Math.random() + 1) * 0x100000),\r\n                \"title\" : e.target.task.value,\r\n                \"isCompleted\" : \"false\"\r\n            })\r\n        })\r\n        .then(res => res.json())\r\n        .then (result => this.props.addRec(result))\r\n        .catch(err => console.log(err));\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <form onSubmit={this.addRecord} className=\"mt5\">\r\n                <div className=\"form-group\">\r\n                    <input type=\"text\" name=\"task\" id=\"task\" className=\"form-control\" placeholder=\"Add new task here...\" />\r\n                </div>\r\n                <div className=\"form-group\">\r\n                    <input type=\"submit\" className=\"btn btn-primary btn-block\" value=\"Add Task\" />\r\n                </div>\r\n            </form>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Addform;","import React, { Component, Fragment } from 'react';\r\n\r\nclass Task extends Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.delRecord = this.delRecord.bind(this);\r\n        this.editRecord = this.editRecord.bind(this);\r\n        this.updateRecord = this.updateRecord.bind(this);\r\n        this.state = {\r\n            isEdit: false\r\n        }\r\n    }\r\n\r\n    delRecord(e){\r\n\r\n        const id = e.target.getAttribute('datakey');\r\n        fetch('http://localhost:4000/tasks/'+id,{\r\n        method: \"DELETE\",\r\n        headers:{\r\n            'Content-Type': 'application/json'\r\n        }\r\n        })\r\n        .then(() => {\r\n        fetch('http://localhost:4000/tasks')\r\n        .then(res => res.json())\r\n        .then(tasks => this.props.onDel(tasks))\r\n        .catch(err => console.log())\r\n        }).catch(err => console.log(err))\r\n        \r\n    }\r\n\r\n    editRecord(){\r\n        this.setState({isEdit: true});\r\n    }\r\n\r\n    updateRecord(e){\r\n        e.preventDefault();\r\n        const id = e.target.id.value;\r\n        fetch('http://localhost:4000/tasks/'+id,{\r\n            method: \"PUT\",\r\n            headers:{\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body:JSON.stringify({\r\n                title: e.target.task.value,\r\n                isCompleted: \"false\",\r\n            })\r\n        })\r\n        .then(res => res.json())\r\n        .then(task =>{ \r\n             this.props.onUpdate(task)\r\n             this.setState({isEdit: false})\r\n            })\r\n        .catch(err => console.log(err))\r\n    }\r\n\r\n    render(){\r\n        const {id, title, isCompleted} = this.props;\r\n\r\n        const task = (this.state.isEdit === true)\r\n        ?\r\n        <form onSubmit={this.updateRecord} className=\"mt5\">\r\n            <input type=\"hidden\" name=\"id\" id=\"id\" defaultValue={id} />\r\n            <div className=\"form-group\">\r\n                <input type=\"text\" name=\"task\" id=\"task\" defaultValue={title} className=\"form-control\" placeholder=\"Add new task here...\" />\r\n            </div>\r\n            <div className=\"form-group\">\r\n                <input type=\"submit\" className=\"btn btn-primary btn-block\" value=\"Update Task\" />\r\n            </div>\r\n        </form>\r\n        :\r\n        <li className=\"list-group-item\" key={id}> \r\n            {title} - {isCompleted} -\r\n            <button className=\"btn btn-primary\" onClick={this.editRecord} datakey={id}>Edit</button> - \r\n            <button className=\"btn btn-danger\" onClick={this.delRecord} datakey={id}>Delete</button>\r\n        </li>\r\n        return(\r\n            <Fragment>\r\n                {task}\r\n            </Fragment>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Task;","import React, { Component } from 'react';\r\nimport logo from '../logo.svg';\r\nimport '../App.css'\r\nimport Addform from './Addform';\r\nimport Task from './Task';\r\n\r\nclass Tasks extends Component{\r\n  constructor(){\r\n    super();\r\n      this.state = {\r\n        tasks : []\r\n      }\r\n      this.addRecord = this.addRecord.bind(this);\r\n      this.delRecord = this.delRecord.bind(this);\r\n      this.getRecord = this.getRecord.bind(this);\r\n\r\n  }\r\n  \r\n  componentDidMount(){\r\n    this.getRecord();\r\n  }\r\n\r\n  getRecord(){\r\n    fetch('http://localhost:4000/tasks')\r\n    .then(res => res.json())\r\n    .then(tasks => this.setState({tasks}))\r\n    .catch(err => console.log())\r\n  }\r\n\r\n  addRecord(e){\r\n    const tasks = [...this.state.tasks, e];\r\n    this.setState({tasks});\r\n  }\r\n\r\n  delRecord(e){\r\n    this.setState({tasks: e})\r\n  }\r\n\r\n  \r\n\r\n  render(){\r\n  const tasks = this.state.tasks.map(task => <Task key={task.id} {...task} onDel={this.delRecord} onUpdate={this.getRecord} />)\r\n\r\n    return (\r\n      <div className=\"App\">\r\n          <header className=\"App-header\">\r\n            <img src={logo} className=\"App-logo\" alt=\"logo\" />\r\n            <h1>Welcome to React App</h1>\r\n          </header>\r\n          <div className=\"App-intro\">\r\n            <div className=\"container\">\r\n              <div className=\"row\">\r\n                <div className=\"col-md-6 offset-md-3\">\r\n\r\n                  <Addform addRec = {this.addRecord}/>\r\n\r\n                <ul className=\"list-group\">\r\n                  <li className=\"list-group-item active\">TO DO TASKS</li>\r\n                  {tasks}\r\n                </ul>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Tasks;\r\n","import React, { Component} from 'react';\r\n\r\nclass Home extends Component{\r\n    \r\n\r\n    render(){\r\n        return(\r\n            <h1>Welcome to home page.</h1>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Home;","import React, { Component} from 'react';\r\n\r\nclass About extends Component{\r\n    \r\n    render(){\r\n        return(\r\n            <h1>Welcome to about page.</h1>\r\n        );\r\n    }\r\n}\r\n\r\nexport default About;","import React, { Component} from 'react';\r\n\r\nclass Contact extends Component{\r\n\r\n    render(){\r\n        return(\r\n            <h1>Welcome to contact page.</h1>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Contact;","import React, { Component, Fragment} from 'react';\r\nimport { BrowserRouter as Router, Switch, Route, Link } from 'react-router-dom';\r\nimport Tasks from './Tasks';\r\nimport Home from './Pages/Home';\r\nimport About from './Pages/About';\r\nimport Contact from './Pages/Contact';\r\n\r\nclass Navbar extends Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {};\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <Router>\r\n                <Fragment>\r\n                    <nav className=\"navbar navbar-expand-lg navbar-dark bg-dark\">\r\n                        <Link className=\"navbar-brand\" to=\"/\">React App</Link>\r\n                        <button className=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n                            <span className=\"navbar-toggler-icon\"></span>\r\n                        </button>\r\n                        <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n                            <ul className=\"navbar-nav mr-auto\">\r\n                                <li className=\"nav-item active\">\r\n                                    <Link className=\"nav-link\" to=\"/home\">Home <span className=\"sr-only\">(current)</span></Link>\r\n                                </li>\r\n                                <li className=\"nav-item\">\r\n                                    <Link className=\"nav-link\" to=\"/about\">About</Link>\r\n                                </li>\r\n                                <li className=\"nav-item\">\r\n                                    <Link className=\"nav-link\" to=\"/tasks\">Tasks</Link>\r\n                                </li>\r\n                                <li className=\"nav-item\">\r\n                                    <Link className=\"nav-link\" to=\"/contact\">Contact</Link>\r\n                                </li>\r\n                            </ul>\r\n                        </div>\r\n                    </nav>\r\n                    <Switch>\r\n                        <Route exact  path=\"/\" component={Home} />\r\n                        <Route exact  path=\"/home\" component={Home} />\r\n                        <Route exact  path=\"/about\" component={About} />\r\n                        <Route exact  path=\"/tasks\" component={Tasks} />\r\n                        <Route exact  path=\"/contact\" component={Contact} />\r\n                    </Switch>\r\n                    </Fragment>\r\n                   \r\n            </Router>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Navbar;","import React, { Component } from 'react';\nimport Navbar from './components/Navbar';\n\nclass App extends Component{\n\n  render(){\n    return (\n        <Navbar />\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}